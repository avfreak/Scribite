<?php
/**
 * Zikula Application Framework
 *
 * @copyright (c) 2001, Zikula Development Team
 * @link http://www.zikula.org
 * @license GNU/GPL - http://www.gnu.org/copyleft/gpl.html
 *
 * @package scribite!
 * @license http://www.gnu.org/copyleft/gpl.html
 *
 * @author sven schomacker
 * @version $Id$
 */

// load some scripts for scribite!

// load prototype as js onload loader
PageUtil::AddVar('javascript', 'javascript/ajax/prototype.js');
PageUtil::AddVar('javascript', 'javascript/ajax/scriptaculous.js');
//PageUtil::AddVar('javascript', 'javascript/ajax/behaviour.js');
//PageUtil::AddVar('javascript', 'javascript/ajax/pnajax.js');

// load pwc scripts for update informations
if (file_exists('javascript/ajax/window.js')) {
	PageUtil::AddVar('javascript', 'javascript/ajax/window.js');
} else {
	PageUtil::AddVar('javascript', 'modules/scribite/pnjavascript/window.js');
}
if (file_exists('javascript/ajax/window_effects.js')) {
	PageUtil::AddVar('javascript', 'javascript/ajax/window_effects.js');
} else {
	PageUtil::AddVar('javascript', 'modules/scribite/pnjavascript/window_effects.js');
}
PageUtil::AddVar('javascript', 'modules/scribite/pnjavascript/scribite.js');
PageUtil::AddVar('stylesheet', 'modules/scribite/pnstyle/PWC/default.css');
PageUtil::AddVar('stylesheet', 'modules/scribite/pnstyle/PWC/alert.css');
PageUtil::AddVar('stylesheet', 'modules/scribite/pnstyle/PWC/alphacube.css');

// Load pnForm Handler for testting
//Loader::requireOnce('includes/pnForm.php');

// main function
function scribite_admin_main()
{
	// Security check
	if (!SecurityUtil::checkPermission( 'scribite::', '::', ACCESS_ADMIN)) {
		return LogUtil::registerPermissionError();
	}

	// Create output object
	$pnRender = pnRender::getInstance('scribite', false);

	// get the output of the main function
	$pnRender->assign('main', scribite_admin_modifyconfig(array()));

// Return the output that has been generated by this function
	return $pnRender->fetch('scribite_admin_main.htm');

}

// modify scribite! configuration
function scribite_admin_modifyconfig($args)
{

	if (!SecurityUtil::checkPermission( 'scribite::', '::', ACCESS_ADMIN)) {
	return LogUtil::registerPermissionError();
	}

	// get all existing editors
	$editor_list = pnModAPIFunc('scribite', 'user', 'getEditors', array('editorname' => 'list'));

	// get configs for modules
	$modconfig = array();
	$modconfig = pnModAPIFunc('scribite', 'user', 'getModuleConfig', array('modulename' => "list"));

	// add value if module is available
	foreach ($modconfig as $mid => $mod) {
		$modconfig[$mid]['modavailable'] = pnModAvailable($mod['modname']);
	}


	$pnRender = pnRender::getInstance('scribite', false);
	$pnRender->assign(pnModGetVar('scribite'));
	$pnRender->assign('editor_list', $editor_list);
	$pnRender->assign('DefaultEditor', pnModGetVar('scribite', 'DefaultEditor'));
	$pnRender->assign('modconfig', $modconfig);

	// check for activated js quicktags
	$jsquicktags = pnModGetVar('/PNConfig', 'jsquicktags');
	if ($jsquicktags == true) {
		$pnRender->assign('jsquicktags', true);
	} else {
		$pnRender->assign('jsquicktags', false);
	}

	return $pnRender->fetch('scribite_admin_modifyconfig.htm');
}

function scribite_admin_updateconfig($args)
{
	if (!SecurityUtil::checkPermission( 'scribite::', '::', ACCESS_ADMIN)) {
		return LogUtil::registerPermissionError();
	}

	if (!SecurityUtil::confirmAuthKey()) {
		LogUtil::registerStatus (_BADAUTHKEY);
		pnRedirect(pnModURL('scribite', 'admin', 'main'));
		return true;
	}

	$modconfig = FormUtil::getPassedValue('modconfig', null, 'REQUEST');
	foreach ($modconfig as $modname => $modeditor) {
		pnModAPIFunc('scribite', 'admin', 'updateeditor', array('modname'   => $modname,
									'modeditor' => $modeditor));
	}
	$editors_path = FormUtil::getPassedValue('editors_path', 'javascript/scribite_editors', 'REQUEST');
	if(!pnModSetVar('scribite', 'editors_path', $editors_path)) {
		LogUtil::registerStatus (_EDITORNOCONFCHANGE);
		return false;
	}
	$DefaultEditor = FormUtil::getPassedValue('DefaultEditor', '-', 'REQUEST');
	if(!pnModSetVar('scribite', 'DefaultEditor', $DefaultEditor)) {
		LogUtil::registerStatus (_EDITORNOCONFCHANGE);
		return false;
	}

	// the module configuration has been updated successfuly
	LogUtil::registerStatus (_CONFIGUPDATED);
	return pnRedirect(pnModURL('scribite', 'admin', 'main'));
}

// add new module config to scribite
function scribite_admin_newmodule($args)
{
	if (!SecurityUtil::checkPermission( 'scribite::', '::', ACCESS_ADMIN)) {
		return LogUtil::registerPermissionError();
	}

	/* testing pnForm
	$render = FormUtil::newpnForm('scribite');
	return $render->pnFormExecute('scribite_admin_module_add.htm', new scribite_admin_addHandler());
	*/

	// get all existing editors
	$editor_list = pnModAPIFunc('scribite', 'user', 'getEditors', array('editorname' => 'list'));

	$pnRender = pnRender::getInstance('scribite', false);
	$pnRender->assign('editor_list', $editor_list);
	return $pnRender->fetch('scribite_admin_addmodule.htm');

}

// add new module to database
function scribite_admin_addmodule($args)
{
	if (!SecurityUtil::checkPermission( 'scribite::', '::', ACCESS_ADMIN)) {
		return LogUtil::registerPermissionError();
	}

	if (!SecurityUtil::confirmAuthKey()) {
		LogUtil::registerStatus (_BADAUTHKEY);
		pnRedirect(pnModURL('scribite', 'admin', 'main'));
		return true;
	}

	$modname   = FormUtil::getPassedValue('modname', null, 'REQUEST');
	$modfuncs  = FormUtil::getPassedValue('modfuncs', null, 'REQUEST');
	$modareas  = FormUtil::getPassedValue('modareas', null, 'REQUEST');
	$modeditor = FormUtil::getPassedValue('modeditor', null, 'REQUEST');

	$mid = pnModAPIFunc('scribite', 'admin', 'addmodule', array('modname'   => $modname,
	'modfuncs'  => $modfuncs,
	'modareas'  => $modareas,
	'modeditor' => $modeditor));

	if ($mid != false) {
		// Success
		LogUtil::registerStatus (_CONFIGUPDATED);
	}

	return pnRedirect(pnModURL('scribite', 'admin', 'main'));
}

// edit module config
function scribite_admin_modifymodule($args)
{
	if (!SecurityUtil::checkPermission( 'scribite::', '::', ACCESS_ADMIN)) {
		return LogUtil::registerPermissionError();
	}
	// get all existing editors
	$editor_list = pnModAPIFunc('scribite', 'user', 'getEditors', array('editorname' => 'list'));

	$modulename = FormUtil::getPassedValue('modulename', null, 'REQUEST');

	// get config for current module
	$modconfig = array();
	$modconfig = pnModAPIFunc('scribite', 'user', 'getModuleConfig', array('modulename' => $modulename));

	//$modfuncs  = implode(',', $modconfig['modfuncs']);
	$modconfig['modfuncs']  = implode(',', $modconfig['modfuncs']);
	//$modareas  = implode(',', $modconfig['modareas']);
	$modconfig['modareas']  = implode(',', $modconfig['modareas']);
	//$modeditor = $modconfig['modeditor'];

	$pnRender = pnRender::getInstance('scribite', false);
	$pnRender->assign('editor_list', $editor_list);
	$pnRender->assign('modconfig', $modconfig);
	//$pnRender->assign('modulename', $modulename);
	//$pnRender->assign('modfuncs', $modfuncs);
	//$pnRender->assign('modareas', $modareas);
	//$pnRender->assign('modeditor', $modeditor);
	return $pnRender->fetch('scribite_admin_modifymodule.htm');
}

// update module config in database
function scribite_admin_updatemodule($args)
{
	if (!SecurityUtil::checkPermission( 'scribite::', '::', ACCESS_ADMIN)) {
		return LogUtil::registerPermissionError();
	}

	if (!SecurityUtil::confirmAuthKey()) {
		LogUtil::registerStatus (_BADAUTHKEY);
		pnRedirect(pnModURL('scribite', 'admin', 'main'));
		return true;
	}

	//$modconfig   = FormUtil::getPassedValue('modconfig', null, 'REQUEST');
	$modulename = FormUtil::getPassedValue('modconfig[modfuncs]', null, 'REQUEST');
	$modfuncs   = FormUtil::getPassedValue('modconfig[modfuncs', null, 'REQUEST');
	$modareas   = FormUtil::getPassedValue('modconfig[modareas', null, 'REQUEST');
	$modeditor  = FormUtil::getPassedValue('modconfig[modeditor]', null, 'REQUEST');

	$mid = pnModAPIFunc('scribite', 'admin', 'editmodule', $modconfig);

	if ($mid != false) {
		// Success
		LogUtil::registerStatus (_CONFIGUPDATED);
	}

	return pnRedirect(pnModURL('scribite', 'admin', 'main'));
}

//
function scribite_admin_delmodule($args)
{
	if (!SecurityUtil::checkPermission( 'scribite::', '::', ACCESS_ADMIN)) {
		return LogUtil::registerPermissionError();
	}

	$modname = FormUtil::getPassedValue('modulename', null, 'REQUEST');

	$pnRender = pnRender::getInstance('scribite', false);
	$pnRender->assign('modname', $modname);
	return $pnRender->fetch('scribite_admin_delmodule.htm');
}

// del module config in database
function scribite_admin_removemodule($args)
{
	if (!SecurityUtil::checkPermission( 'scribite::', '::', ACCESS_ADMIN)) {
		return LogUtil::registerPermissionError();
	}

	if (!SecurityUtil::confirmAuthKey()) {
		LogUtil::registerStatus (_BADAUTHKEY);
		pnRedirect(pnModURL('scribite', 'admin', 'main'));
		return true;
	}

	$args['modulename'] = FormUtil::getPassedValue('modulename', null, 'REQUEST');

	$mid = pnModAPIFunc('scribite', 'admin', 'delmodule', array('modulename' => $args['modulename']));

	if ($mid != false) {
		// Success
		LogUtil::registerStatus (_CONFIGUPDATED);
	}

	return pnRedirect(pnModURL('scribite', 'admin', 'main'));
}

function scribite_admin_modifyxinha($args)
{
	if (!SecurityUtil::checkPermission( 'scribite::', '::', ACCESS_ADMIN)) {
		return LogUtil::registerPermissionError();
	}

	$pnRender = pnRender::getInstance('scribite', false);
	$pnRender->assign(pnModGetVar('scribite'));
	$pnRender->assign('xinha_langlist', pnModAPIFunc('scribite', 'admin', 'getxinhaLangs'));
	$pnRender->assign('xinha_skinlist', pnModAPIFunc('scribite', 'admin', 'getxinhaSkins'));
	$pnRender->assign('xinha_allplugins', pnModAPIFunc('scribite', 'admin', 'getxinhaPlugins'));
	return $pnRender->fetch('scribite_admin_modifyxinha.htm');
}

function scribite_admin_updatexinha($args)
{
	if (!SecurityUtil::checkPermission( 'scribite::', '::', ACCESS_ADMIN)) {
		return LogUtil::registerPermissionError();
	}

	$xinha_language      = FormUtil::getPassedValue('xinha_language', 'en', 'REQUEST');
	$xinha_skin          = FormUtil::getPassedValue('xinha_skin', 'blue-look', 'REQUEST');
	$xinha_barmode       = FormUtil::getPassedValue('xinha_barmode', 'reduced', 'REQUEST');
	$xinha_width         = FormUtil::getPassedValue('xinha_width', 'auto', 'REQUEST');
	$xinha_height        = FormUtil::getPassedValue('xinha_height', 'auto', 'REQUEST');
	$xinha_style         = FormUtil::getPassedValue('xinha_style', 'modules/scribite/pnconfig/xinha/editor.css', 'REQUEST');
	$xinha_converturls   = FormUtil::getPassedValue('xinha_converturls', '0', 'REQUEST');
	$xinha_showloading   = FormUtil::getPassedValue('xinha_showloading', '0', 'REQUEST');
	$xinha_statusbar     = FormUtil::getPassedValue('xinha_statusbar', 1, 'REQUEST');
	$xinha_activeplugins = FormUtil::getPassedValue('xinha_activeplugins', null, 'REQUEST');
	if (!SecurityUtil::confirmAuthKey()) {
		LogUtil::registerStatus (_BADAUTHKEY);
		pnRedirect(pnModURL('scribite', 'admin', 'main'));
		return true;
	}

	if (!pnModSetVar('scribite', 'xinha_language', $xinha_language)) {
		LogUtil::registerStatus (_EDITORNOCONFCHANGE);
		return false;
	}
	if (!pnModSetVar('scribite', 'xinha_skin', $xinha_skin)) {
		LogUtil::registerStatus (_EDITORNOCONFCHANGE);
		return false;
	}
	if (!pnModSetVar('scribite', 'xinha_barmode', $xinha_barmode)) {
		LogUtil::registerStatus (_EDITORNOCONFCHANGE);
		return false;
	}
	$xinha_width = rtrim($xinha_width, 'px');
	if (!pnModSetVar('scribite', 'xinha_width', $xinha_width)) {
		LogUtil::registerStatus (_EDITORNOCONFCHANGE);
		return false;
	}
	$xinha_height = rtrim($xinha_height, 'px');
	if (!pnModSetVar('scribite', 'xinha_height', $xinha_height)) {
		LogUtil::registerStatus (_EDITORNOCONFCHANGE);
		return false;
	}
	$xinha_style = ltrim($xinha_style, '/');
	if (!pnModSetVar('scribite', 'xinha_style', $xinha_style)) {
		LogUtil::registerStatus (_EDITORNOCONFCHANGE);
		return false;
	}
	if (!pnModSetVar('scribite', 'xinha_converturls', $xinha_converturls)) {
		LogUtil::registerStatus (_EDITORNOCONFCHANGE);
		return false;
	}
	if (!pnModSetVar('scribite', 'xinha_showloading', $xinha_showloading)) {
		LogUtil::registerStatus (_EDITORNOCONFCHANGE);
		return false;
	}
	if (!pnModSetVar('scribite', 'xinha_statusbar', $xinha_statusbar)) {
		LogUtil::registerStatus (_EDITORNOCONFCHANGE);
		return false;
	}
	if (!empty($xinha_activeplugins)) {
		$xinha_activeplugins = serialize($xinha_activeplugins);
	}
	if (!pnModSetVar('scribite', 'xinha_activeplugins', $xinha_activeplugins)) {
		LogUtil::registerStatus (_EDITORNOCONFCHANGE);
		return false;
	}

	// the module configuration has been updated successfuly
	LogUtil::registerStatus (_CONFIGUPDATED);
	return pnRedirect(pnModURL('scribite', 'admin', 'modifyxinha'));
}

function scribite_admin_modifyopenwysiwyg($args)
{
	if (!SecurityUtil::checkPermission( 'scribite::', '::', ACCESS_ADMIN)) {
		return LogUtil::registerPermissionError();
	}

	$pnRender = pnRender::getInstance('scribite', false);
	$pnRender->assign(pnModGetVar('scribite'));
	return $pnRender->fetch('scribite_admin_modifyopenwysiwyg.htm');
}

function scribite_admin_updateopenwysiwyg($args)
{
	if (!SecurityUtil::checkPermission( 'scribite::', '::', ACCESS_ADMIN)) {
		return LogUtil::registerPermissionError();
	}

	$openwysiwyg_barmode = FormUtil::getPassedValue('openwysiwyg_barmode', 'small', 'REQUEST');
	$openwysiwyg_width   = FormUtil::getPassedValue('openwysiwyg_width', '500px', 'REQUEST');
	$openwysiwyg_height  = FormUtil::getPassedValue('openwysiwyg_height', '300px', 'REQUEST');

	if (!SecurityUtil::confirmAuthKey()) {
		LogUtil::registerStatus (_BADAUTHKEY);
		pnRedirect(pnModURL('scribite', 'admin', 'main'));
		return true;
	}

	if (!pnModSetVar('scribite', 'openwysiwyg_barmode', $openwysiwyg_barmode)) {
		LogUtil::registerStatus (_EDITORNOCONFCHANGE);
		return false;
	}
	$openwysiwyg_width = rtrim($openwysiwyg_width, 'px');
	if (!pnModSetVar('scribite', 'openwysiwyg_width', $openwysiwyg_width)) {
		LogUtil::registerStatus (_EDITORNOCONFCHANGE);
		return false;
	}
	$openwysiwyg_height = rtrim($openwysiwyg_height, 'px');
	if (!pnModSetVar('scribite', 'openwysiwyg_height', $openwysiwyg_height)) {
		LogUtil::registerStatus (_EDITORNOCONFCHANGE);
		return false;
	}

	// the module configuration has been updated successfuly
	LogUtil::registerStatus (_CONFIGUPDATED);
	return pnRedirect(pnModURL('scribite', 'admin', 'modifyopenwysiwyg'));
}

function scribite_admin_modifytinymce($args)
{
	if (!SecurityUtil::checkPermission( 'scribite::', '::', ACCESS_ADMIN)) {
		return LogUtil::registerPermissionError();
	}

	$pnRender = pnRender::getInstance('scribite', false);
	$pnRender->assign(pnModGetVar('scribite'));
	$pnRender->assign('tinymce_langlist', pnModAPIFunc('scribite', 'admin', 'gettinymceLangs'));
	$pnRender->assign('tinymce_themelist', pnModAPIFunc('scribite', 'admin', 'gettinymceThemes'));
	$pnRender->assign('tinymce_allplugins', pnModAPIFunc('scribite', 'admin', 'gettinymcePlugins'));
	return $pnRender->fetch('scribite_admin_modifytinymce.htm');
}

function scribite_admin_updatetinymce($args)
{
	if (!SecurityUtil::checkPermission( 'scribite::', '::', ACCESS_ADMIN)) {
		return LogUtil::registerPermissionError();
	}

	$tinymce_language      = FormUtil::getPassedValue('tinymce_language', 'en', 'REQUEST');
	$tinymce_style         = FormUtil::getPassedValue('tinymce_style', 'modules/scribite/pnconfig/tiny_mce/editor.css', 'REQUEST');
	$tinymce_theme         = FormUtil::getPassedValue('tinymce_theme', 'advanced', 'REQUEST');
	$tinymce_width         = FormUtil::getPassedValue('tinymce_width', '75%', 'REQUEST');
	$tinymce_height        = FormUtil::getPassedValue('tinymce_height', '400', 'REQUEST');
	$tinymce_activeplugins = FormUtil::getPassedValue('tinymce_activeplugins', 'en', 'REQUEST');
	$tinymce_dateformat    = FormUtil::getPassedValue('tinymce_dateformat', '%Y-%m-%d', 'REQUEST');
	$tinymce_timeformat    = FormUtil::getPassedValue('tinymce_timeformat', '%H:%M:%S', 'REQUEST');
	$tinymce_ask           = FormUtil::getPassedValue('tinymce_ask', 0, 'REQUEST');
	$tinymce_mcpuk         = FormUtil::getPassedValue('tinymce_mcpuk', 0, 'REQUEST');

	if (!SecurityUtil::confirmAuthKey()) {
		LogUtil::registerStatus (_BADAUTHKEY);
		pnRedirect(pnModURL('scribite', 'admin', 'main'));
		return true;
	}

	if (!pnModSetVar('scribite', 'tinymce_language', $tinymce_language)) {
		LogUtil::registerStatus (_EDITORNOCONFCHANGE);
		return false;
	}
	$tinymce_style = ltrim($tinymce_style, '/');
	if (!pnModSetVar('scribite', 'tinymce_style', $tinymce_style)) {
		LogUtil::registerStatus (_EDITORNOCONFCHANGE);
		return false;
	}
	if (!pnModSetVar('scribite', 'tinymce_theme', $tinymce_theme)) {
		LogUtil::registerStatus (_EDITORNOCONFCHANGE);
		return false;
	}
	$tinymce_width = rtrim($tinymce_width, 'px');
	if (!pnModSetVar('scribite', 'tinymce_width', $tinymce_width)) {
		LogUtil::registerStatus (_EDITORNOCONFCHANGE);
		return false;
	}
	$tinymce_height = rtrim($tinymce_height, 'px');
	if (!pnModSetVar('scribite', 'tinymce_height', $tinymce_height)) {
		LogUtil::registerStatus (_EDITORNOCONFCHANGE);
		return false;
	}
	if (!empty($tinymce_activeplugins)) {
		$tinymce_activeplugins = serialize($tinymce_activeplugins);
	}
	if (!pnModSetVar('scribite', 'tinymce_activeplugins', $tinymce_activeplugins)) {
		LogUtil::registerStatus (_EDITORNOCONFCHANGE);
		return false;
	}
	if (!pnModSetVar('scribite', 'tinymce_dateformat', $tinymce_dateformat)) {
		LogUtil::registerStatus (_EDITORNOCONFCHANGE);
		return false;
	}
	if (!pnModSetVar('scribite', 'tinymce_timeformat', $tinymce_timeformat)) {
		LogUtil::registerStatus (_EDITORNOCONFCHANGE);
		return false;
	}
	if (!pnModSetVar('scribite', 'tinymce_ask', $tinymce_ask)) {
		LogUtil::registerStatus (_EDITORNOCONFCHANGE);
		return false;
	}
	if (!pnModSetVar('scribite', 'tinymce_mcpuk', $tinymce_mcpuk)) {
		LogUtil::registerStatus (_EDITORNOCONFCHANGE);
		return false;
	}

	// the module configuration has been updated successfuly
	LogUtil::registerStatus (_CONFIGUPDATED);
	return pnRedirect(pnModURL('scribite', 'admin', 'modifytinymce'));
}

function scribite_admin_modifyfckeditor($args)
{
	if (!SecurityUtil::checkPermission( 'scribite::', '::', ACCESS_ADMIN)) {
		return LogUtil::registerPermissionError();
	}

	$pnRender = pnRender::getInstance('scribite', false);
	$pnRender->assign(pnModGetVar('scribite'));
	$pnRender->assign('fckeditor_barmodelist', pnModAPIFunc('scribite', 'admin', 'getfckeditorBarmodes'));
	$pnRender->assign('fckeditor_langlist', pnModAPIFunc('scribite', 'admin', 'getfckeditorLangs'));
	return $pnRender->fetch('scribite_admin_modifyfckeditor.htm');
}

function scribite_admin_updatefckeditor($args)
{
	if (!SecurityUtil::checkPermission( 'scribite::', '::', ACCESS_ADMIN)) {
		return LogUtil::registerPermissionError();
	}

	$fckeditor_language = FormUtil::getPassedValue('fckeditor_language', 'en', 'REQUEST');
	$fckeditor_barmode  = FormUtil::getPassedValue('fckeditor_barmode', 'Default', 'REQUEST');
	$fckeditor_width    = FormUtil::getPassedValue('fckeditor_width', '500', 'REQUEST');
	$fckeditor_height   = FormUtil::getPassedValue('fckeditor_height', '400', 'REQUEST');
	$fckeditor_autolang = FormUtil::getPassedValue('fckeditor_autolang', 0, 'REQUEST');

	if (!SecurityUtil::confirmAuthKey()) {
		LogUtil::registerStatus (_BADAUTHKEY);
		pnRedirect(pnModURL('scribite', 'admin', 'main'));
		return true;
	}

	if (!pnModSetVar('scribite', 'fckeditor_language', $fckeditor_language)) {
		LogUtil::registerStatus (_EDITORNOCONFCHANGE);
		return false;
	}
	if (!pnModSetVar('scribite', 'fckeditor_barmode', $fckeditor_barmode)) {
		LogUtil::registerStatus (_EDITORNOCONFCHANGE);
		return false;
	}
	$fckeditor_width = rtrim($fckeditor_width, 'px');
	if (!pnModSetVar('scribite', 'fckeditor_width', $fckeditor_width)) {
		LogUtil::registerStatus (_EDITORNOCONFCHANGE);
		return false;
	}
	$fckeditor_height = rtrim($fckeditor_height, 'px');
	if (!pnModSetVar('scribite', 'fckeditor_height', $fckeditor_height)) {
		LogUtil::registerStatus (_EDITORNOCONFCHANGE);
		return false;
	}
	if (!pnModSetVar('scribite', 'fckeditor_autolang', $fckeditor_autolang)) {
		LogUtil::registerStatus (_EDITORNOCONFCHANGE);
		return false;
	}

	// the module configuration has been updated successfuly
	LogUtil::registerStatus (_CONFIGUPDATED);
	return pnRedirect(pnModURL('scribite', 'admin', 'modifyfckeditor'));
}

function scribite_admin_modifynicedit($args)
{
	if (!SecurityUtil::checkPermission( 'scribite::', '::', ACCESS_ADMIN)) {
		return LogUtil::registerPermissionError();
	}

	$pnRender = pnRender::getInstance('scribite', false);
	$pnRender->assign(pnModGetVar('scribite'));
	return $pnRender->fetch('scribite_admin_modifynicedit.htm');
}

function scribite_admin_updatenicedit($args)
{
	if (!SecurityUtil::checkPermission( 'scribite::', '::', ACCESS_ADMIN)) {
		return LogUtil::registerPermissionError();
	}

	$nicedit_fullpanel = FormUtil::getPassedValue('nicedit_fullpanel', 0, 'REQUEST');

	if (!SecurityUtil::confirmAuthKey()) {
		LogUtil::registerStatus (_BADAUTHKEY);
		pnRedirect(pnModURL('scribite', 'admin', 'main'));
		return true;
	}

	if (!pnModSetVar('scribite', 'nicedit_fullpanel', $nicedit_fullpanel)) {
		LogUtil::registerStatus (_EDITORNOCONFCHANGE);
		return false;
	}

	// the module configuration has been updated successfuly
	LogUtil::registerStatus (_CONFIGUPDATED);
	return pnRedirect(pnModURL('scribite', 'admin', 'modifynicedit'));
}

/*
class scribite_admin_addHandler extends pnFormHandler
{
	function initialize(&$render)
	{

	//$editor_list = pnModAPIFunc('scribite', 'user', 'getEditors', array('editorname' => 'list'));
		$editor_list[0]='-';
		$editor_list[1]='xinha';
		$editor_list[2]='tinymce';
		$editor_list[3]='fckeditor';
		$editor_list[4]='openwysiwyg';
		$editor_list[5]='nicedit';
		$editor_list = array( array('text' => '-', 'value' => '-'),
					array('text' => 'xinha', 'value' => 'xinha'),
					array('text' => 'tinymce', 'value' => 'tinymce'),
					array('text' => 'fckeditor', 'value' => 'fckeditor'),
					array('text' => 'openwysiwyg', 'value' => 'openwysiwyg'),
					array('text' => 'nicedit', 'value' => 'nicedit') );

		$render->assign('editor_list', $editor_list);
		$render->assign('modeditor', 'xinha');

		return true;
	}
}
*/
